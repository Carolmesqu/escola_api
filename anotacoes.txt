-----------------------------------------------------------------------
Durante os vídeos, vimos que não é interessante entregar ou renderizar 
sempre uma página HTML, já que existe dispositivos e finalidades que 
não utilizarão o HTML, mas sim os dados.

Dito isso, qual o primeiro passo para criar uma aplicação integrável?

Devemos entregar os dados em outros formatos, por exemplo JSON.
Alternativa correta! Devemos entregar nossos dados em formatos mais 
acessíveis para agentes intermediários como outros desenvolvedores!
-----------------------------------------------------------------------
Documentação oficial:
O Django Rest Framework é uma biblioteca poderosa para desenvolver 
web APIs de forma rápida, segura e simples.

Para maiores informações sobre esta incrível biblioteca,
https://www.django-rest-framework.org/

Quer entender melhor o que é JSON?
https://www.alura.com.br/artigos/o-que-e-json?utm_source=gnarus&utm_
medium=timeline&_gl=1*mth42u*_ga*MjA1MjM4MzU0NC4xNzA4MDQyNDY1*_ga_1
EPWSW3PCS*MTcwODQ4MDg1OS44LjEuMTcwODQ4Mjg5Ni4wLjAuMA..*_fplc*Q09Kd1
VSc2c0R2lXS0lRYUNZMTdhZlV0Zlc1RkQ2M3VWJTJGZ2RqTHBhSEpwY0ZZa3F0Qm9ac
WclMkZPMWh3cGMwNkdnaUVjdzN4Skk3S2JvcTk2MlNvWHpMSExvOSUyRkduZzVrVkJu
VXRUQVF0T0dIcU56MldmdyUyRlk5d0dFNTVKSkElM0QlM0Q.
-----------------------------------------------------------------------
Entendemos o que é uma API;
Realizamos uma requisição GET retornando um Json;
Instalamos o Django Rest Framework.
-----------------------------------------------------------------------
Usuário (leave blank to use 'carol'): 
Endereço de email: carol@test.com
Password:123456
venv\Scripts\activate
-----------------------------------------------------------------------
Para manter os dados armazenados no banco de dados, criamos um modelo 
e executamos a migração.

Sabendo disso, para entregar os dados armazenados no banco de dados 
no formato Json por exemplo ou receber um Json para salvar no banco 
de dados, o que devemos fazer?

Devemos criar uma classe com a responsabilidade de serializar os 
dados.

Alternativa correta! Certo! Os dados de saída devem ser serializados 
em um formato específico, e os dados de entrada serão desserializados 
para processamento.
-----------------------------------------------------------------------
Criamos o modelo de aluno e de curso;

Configuramos o Django Admin para criar, editar, listar e deletar 
alunos, alunas ou cursos;

Criamos a classe responsável para serializar os dados.
-----------------------------------------------------------------------
Como vimos na aula, os ViewSets permitem definir as interações da sua 
API e permitir que a estrutura REST construa os URLs dinamicamente 
com um objeto roteador.

Sabendo disso, analise as afirmações abaixo e marque as verdadeiras.

A utilização de Viewset pode evitar repetir a lógica das views.
Alternativa correta! Certo! Não será necessário incluir a lógica para 
um CRUD, analisando as estruturas do REST para cada recurso.

Viewsets incluem ações como criar, listar, atualizar ou deletar.
Alternativa correta! Certo! Os Viewsets incluem essas ações ou 
operações por padrão.
-----------------------------------------------------------------------
Criamos as classes AlunosViewSet e CursosViewSet para usufruir das 
principais;

Realizamos uma requisição GET retornando um Json;

Instalamos o Django Rest Framework.
-----------------------------------------------------------------------
O protocolo HTTP define um conjunto de métodos de requisição 
responsáveis por indicar a ação a ser executada para um dado recurso. 
Embora esses métodos possam ser descritos como substantivos, eles 
também são comumente referenciados como HTTP Verbs (Verbos HTTP).

Em relação aos verbos, podemos dizer que:

O método DELETE remove um recurso específico.

Alternativa correta! Certo! Conforme vimos em aula, o 
localhost:8000/alunos/2 com uma solicitação DELETE por exemplo, 
irá remover este recurso do servidor.

Existem 2 métodos para atualizar um recurso no servidor.
Alternativa correta! Certo! O método PUT substitui todas as atuais 
representações do recurso de destino pela carga de dados da requisição 
Já o método PATCH é utilizado para aplicar modificações parciais em 
um recurso.

O método GET solicita a representação de um recurso específico.
Alternativa correta! Certo! Conforme vimos em aula, o 
localhost:8000/alunos/2 com uma solicitação GET por exemplo, 
nos mostra detalhes de um determinado aluno ou aluna.
-----------------------------------------------------------------------
Vimos que existem dois verbos do HTTP para atualizar um recurso, 
o PUT e o PATCH;

Deletamos um recurso executando uma solicitação DELETE;

Criamos o modelo de matrícula, vinculando um aluno em um curso;

Disponibilizamos os recursos de matrícula para nossa API.
-----------------------------------------------------------------------
Ariel criou o seguinte serializer para listar todos os alunos 
matriculados em um curso:

class ListaAlunosMatriculadosSerializer(serializers.ModelSerializer):
    class Meta:
        model = Matricula
        fields = ['aluno']

Porém, após realizar todas as configurações nos modelos, view.py e 
urls.py, percebeu que os ids dos alunos eram exibidos e não seus nomes. 
Com base nessa situação, analise as afirmações abaixo e marque as 
verdadeiras:

É possível configurar as informações que serão exibidas no serializer, 
mesmo que relacionadas a uma foreign key.
Alternativa correta! Certo! Observe o código abaixo, onde é possível 
configurar o serializer para exibir os nomes dos alunos matriculados 
em um curso.

class ListaAlunosMatriculadosSerializer(serializers.ModelSerializer):
    aluno_nome = serializers.ReadOnlyField(source='aluno.nome')
    class Meta:
        model = Matricula
        fields = ['aluno_nome']

Os serializadores permitem que dados complexos, como conjuntos de 
consultas e instâncias de modelo, sejam convertidos em tipos de 
dados Python nativos.

Alternativa correta! Certo! Além de convertidos para dados do 
Python, podem ser facilmente renderizados em JSON, XML ou outros 
tipos de conteúdo.
-----------------------------------------------------------------------

.
